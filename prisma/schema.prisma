generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator" // visualize at https://dbdiagram.io/d
}

generator factories {
    provider = "prisma-factory"
    output   = "./generated"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum UserRole {
    ADMIN
    SUPERVISOR
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    Post          Post[]
    APIKey        ApiKey[]
}

model ApiKey {
    id         String    @id @default(cuid())
    key        String    @unique @default(cuid())
    user       User      @relation(fields: [userId], references: [id])
    userId     String
    enabled    Boolean   @default(true)
    lastUsedAt DateTime?
    createdAt  DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id    String @id @default(cuid())
    title String
    body  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String
}
